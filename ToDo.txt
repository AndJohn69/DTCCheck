https://playcode.io/dtctest?tabs=console&script.js&output


var msg = 'Result: ';

var Plant = "VCT";
var ProcessStep = "FHC";
var CarId = "3612345"
var IsTestCar = true;
var Ecu = "IHU";
var AutosarVersion = "4.1";
var DTCHex = "D30B87";
var DTCSAE = "U130B87";
var TestTime = "2018-11-24 08:00";
var GlobalTimeRead = "3945.1";
var status = "20";
var extended = "01120204031204010600070410801100127F200000939421000093943064";
var snapshot = "01120204031204010600070410801100127F200000939421000093943064";

var dtcDict = {Plant,ProcessStep,CarId,IsTestCar,Ecu,TestTime,GlobalTimeRead,AutosarVersion,DTCHex,DTCSAE};

getDtcStatusBitsFromHexString(dtcDict, status);
getDtcExtendedDataFromHexString(dtcDict, extended);
// getDtcSnapshotDataFromHexString(dtcDict, snapshot);

for(var id in dtcDict) {
  var value = dtcDict[id];
 
  console.log(id + ": " + value);
 
}


$('#msg').html(msg + dtcDict.FDC10)

function getDtcStatusBitsFromHexString(dict, statusByte){
        var value = statusByte.substr(0, 2); // 1 byte hex
        // Create SB0-7 (bit value 1/0)
        var valueBin = "00000000" + parseInt(value, 16).toString(2);
        for(var i = 0; i <= 7; i++){
          dict["SB" + i] = valueBin.substr(-(i+1),1);
        }
        dict["SB"] = value;
  
}

function getDtcExtendedDataFromHexString(dict, extendedData){
  
  // Loops through the 'extendedData' hex string and creates/updates 
  // the following properties of the 'dict' object with the corresponding values from the hex string:
  // OCC1: 0-255 (dec)
  // OCC2: 0-255 (dec)
  // OCC3: 0-255 (dec)
  // OCC4: 0-255 (dec)
  // OCC6: 0-255 (dec)
  // OCC7: 0-255 (dec)
  // FDC10: -128-127 (dec)
  // FDC11: -128-127 (dec)
  // FDC12: -128-127 (dec)
  // TS20: seconds (one decimal)
  // TS21: seconds (one decimal)
  // SI0: 0/1 (bit value)
  // SI1: 0/1 (bit value)
  // SI2: 0/1 (bit value)
  // SI3: 0/1 (bit value)
  // SI4: 0/1 (bit value)
  // SI5: 0/1 (bit value)
  // SI6: 0/1 (bit value)
  // SI7: 0/1 (bit value)
  // SI30: 1 byte hex string
  
  var pos = 0;
  var id = "";
  var value = 0;
  
  do {
    id = extendedData.substr(pos, 2);
    pos = pos + 2;
    
    switch (id) {
      // OCC's
      case '01':
      case '02':
      case '03':
      case '04':
      case '05':
      case '06':
      case '07':
        value = parseInt(extendedData.substr(pos, 2), 16);  // Unsigned byte (0-255)
        pos = pos + 2;
        id = "OCC" + id.substr(1,1);
        break;
      // FDC's
      case '10':
      case '11':
      case '12':  
        value = signedHexByteToDecimal(extendedData.substr(pos, 2)); // Signed byte (-128-127)
        pos = pos + 2;
        id = "FDC" + id;
        break;
      // TS's
      case '20':
      case '21':  
        value = (parseInt(extendedData.substr(pos, 8), 16) / 10).toFixed(1); // Time in seconds
        pos = pos + 8;
        id = "TS" + id;
        break;
      // SI
      case '30':  
        value = extendedData.substr(pos, 2); // 1 byte hex
        // Create SI0-7 (bit value 1/0)
        var valueBin = "00000000" + parseInt(value, 16).toString(2);
        for(var i = 0; i <= 7; i++){
          dict["SI" + i] = valueBin.substr(-(i+1),1);
        }
        pos = pos + 2;
        id = "SI" + id;
        break;
      default:
        value = 0;
        id = "??" + id;
        pos = pos + 2;
    }
    
    dict[id] = value;
    
  } while (pos < extendedData.length);
  
  return dict;
  
  
}

function signedHexByteToDecimal (hexByte){
  
  a = parseInt(hexByte, 16);
  if ((a & 0x80) > 0) {
    a = a - 0x100;
  }
  
  return a;
}

function getDtcSnapshotDataFromHexString(dict, snapshotData){
}
