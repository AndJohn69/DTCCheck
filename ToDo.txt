Read DTCs (bitmask?)
Loop each DTC
    Read extended data (handle no resp / invalid resp)
    Read snapshot data (handle no resp / invalid resp)
Check if valid DTC (valid = not erased/hidden by VCATS)
    Set flag
Erase all if no valid -> Set/update global flag
    else Erase each not valid DTC separately (handle no resp / invalid resp)

Log action (including test car status)
Log process + DTCHex + status + extended + snapshot
Log diagno + SW + test time / global time read + time set + Autosar version

Functional ClearDTC in the end if no valid DTC?

Autosar version?



https://playcode.io/dtctest/v2?tabs=console&script.js&output



var Plant = "VCT";
var ProcessStep = "FHC";
var CarMixNumber = "3612345"
var IsTestCar = true;
var TestCarId = "XYV1600"
var Ecu = "IHU";
var AutosarVersion = "4.1";
var DiagDbNumber = "31123456AB";
var EcuSWNumbers = "31123457AA,31123458AB,31123459AC"
var DTCHex = "D30B87";
var DTCSAE = "U130B87";
var TestTime = "2018-11-24 08:00";
var GlobalTimeReadInSeconds = "3945.1";

var status = "20";
var extended = "01120204031204010600070410801100127F200000939421000093943084";
var snapshot = "2005DD000002770EDD01000001DD0237DD0A0DDD0B0008";

var dtcDict = 
{Plant,ProcessStep,CarMixNumber,IsTestCar,TestCarId,Ecu,TestTime,GlobalTimeReadInSeconds,
AutosarVersion,DiagDbNumber,EcuSWNumbers,DTCHex,DTCSAE};

getDtcStatusBitsFromHexString(dtcDict, status);
getDtcExtendedDataFromHexString(dtcDict, extended);
getDtcSnapshotStdDataFromHexString(dtcDict, snapshot);
checkIfDTCValid(dtcDict);

if (dtcDict.IsDtcValid) {
    console.log(dtcDict.DTCSAE + " is valid. (" + dtcDict.IsDtcValidInfo + ")");  
}
else {
    console.log(dtcDict.DTCSAE + " is not valid. (" + dtcDict.IsDtcValidInfo + ")");
}

for(var id in dtcDict) {
  var value = dtcDict[id];
 
  console.log(id + ": " + value);
 
}

function checkIfDTCValid(dtcDict){
  if (dtcDict.SI3 == 1) {               // Aged DTC  - Not valid
    dtcDict.IsDtcValid = false; 
    dtcDict.IsDtcValidInfo = "Aged DTC";
    return;
  }  
  if (dtcDict.SI6 == 1) {               // Emission DTC - Valid
    dtcDict.IsDtcValid = true;
    dtcDict.IsDtcValidInfo = "Emission DTC";
    return;
  }  
  if (dtcDict.SB0 == 1) {               // Test failed now - Valid
    dtcDict.IsDtcValid = true;
    dtcDict.IsDtcValidInfo = "Test failed now";
    return; 
  } 
  if (dtcDict.OCC2 > 1) {               // Confirmed fault free cycles since last cycle with faults > 1. - Not valid
    dtcDict.IsDtcValid = false;
    dtcDict.IsDtcValidInfo = dtcDict.OCC2 + " OK cycles since set";
    return;
  }  
  dtcDict.IsDtcValid = true;
  dtcDict.IsDtcValidInfo = "n/a";
}

function getDtcStatusBitsFromHexString(dict, statusByte){
  
  // Creates/updates the following properties of the 'dict' object from the input byte / hex string:
  // SB0: 0/1 (bit value)
  // SB1: 0/1 (bit value)
  // SB2: 0/1 (bit value)
  // SB3: 0/1 (bit value)
  // SB4: 0/1 (bit value)
  // SB5: 0/1 (bit value)
  // SB6: 0/1 (bit value)
  // SB7: 0/1 (bit value)
  // SB: Status byte (hex value)
  
  
        var value = statusByte.substr(0, 2); // 1 byte hex
        // Create SB0-7 (bit value 1/0)
        var valueBin = "00000000" + parseInt(value, 16).toString(2);
        for(var i = 0; i <= 7; i++){
          dict["SB" + i] = valueBin.substr(-(i+1),1);
        }
        dict["SB"] = "0x" + value;
  
}

function getDtcExtendedDataFromHexString(dict, extendedData){
  
  // Loops through the 'extendedData' hex string and creates/updates 
  // the following properties of the 'dict' object with the corresponding values from the hex string:
  // OCC1: 0-255 (dec)
  // OCC2: 0-255 (dec)
  // OCC3: 0-255 (dec)
  // OCC4: 0-255 (dec)
  // OCC6: 0-255 (dec)
  // OCC7: 0-255 (dec)
  // FDC10: -128-127 (dec)
  // FDC11: -128-127 (dec)
  // FDC12: -128-127 (dec)
  // TS20: seconds (with one decimal)
  // TS21: seconds (with one decimal)
  // SI0: 0/1 (bit value)
  // SI1: 0/1 (bit value)
  // SI2: 0/1 (bit value)
  // SI3: 0/1 (bit value)
  // SI4: 0/1 (bit value)
  // SI5: 0/1 (bit value)
  // SI6: 0/1 (bit value)
  // SI7: 0/1 (bit value)
  // SI30: 1 byte hex
  
  var pos = 0;
  var id = "";
  var value = 0;
  
  do {
    id = extendedData.substr(pos, 2);
    pos = pos + 2;
    
    switch (id) {
      // OCC's
      case '01':
      case '02':
      case '03':
      case '04':
      case '05':
      case '06':
      case '07':
        value = parseInt(extendedData.substr(pos, 2), 16);  // Unsigned byte (0-255)
        pos = pos + 2;
        id = "OCC" + id.substr(1,1);
        break;
      // FDC's
      case '10':
      case '11':
      case '12':  
        value = signedHexByteToDecimal(extendedData.substr(pos, 2)); // Signed byte (-128-127)
        pos = pos + 2;
        id = "FDC" + id;
        break;
      // TS's
      case '20':
      case '21':  
        value = (parseInt(extendedData.substr(pos, 8), 16) / 10).toFixed(1); // Time in seconds
        pos = pos + 8;
        id = "TS" + id;
        break;
      // SI
      case '30':  
        value = "0x" + extendedData.substr(pos, 2); // 1 byte hex
        // Create SI0-7 (bit value 1/0)
        var valueBin = "00000000" + parseInt(value, 16).toString(2);
        for(var i = 0; i <= 7; i++){
          dict["SI" + i] = valueBin.substr(-(i+1), 1);
        }
        pos = pos + 2;
        id = "SI" + id;
        break;
      default:
        value = 0;
        id = "??" + id;
        pos = pos + 2;
    }
    
    dict[id] = value;
    
  } while (pos < extendedData.length);
  
}

function signedHexByteToDecimal (hexByte){
  
  a = parseInt(hexByte, 16);
  if ((a & 0x80) > 0) {
    a = a - 0x100;
  }
  
  return a;
}

function getDtcSnapshotStdDataFromHexString(dict, snapshotData){
    // "2005DD000002770EDD01000001DD0237DD0A0DDD0B0008"
    var pos = 0;
    // DD00 Global time
    pos = snapshotData.search("DD00");
    if (pos != -1 ) { 
        dict["DD00"] = (parseInt(snapshotData.substr(pos + 4, 8), 16) / 10).toFixed(1); // Time in seconds
    }
    // DD01 Distance
    pos = snapshotData.search("DD01");
    if (pos != -1 ) dict["DD01"] = parseInt(snapshotData.substr(pos + 4, 6), 16); // Km
    // DD02 Battery V
    pos = snapshotData.search("DD02");
    if (pos != -1 ) dict["DD02"] = (parseInt(snapshotData.substr(pos + 4, 2), 16) / 4).toFixed(2); // Voltage
    // DD0A Usage Mode
    pos = snapshotData.search("DD0A");
    if (pos != -1 ) dict["DD0A"] = "0x" + snapshotData.substr(pos + 4, 2);
    // DD0B PNC
     pos = snapshotData.search("DD0B");
    if (pos != -1 ) dict["DD0B"] = "0x" + snapshotData.substr(pos + 4, 4);
}
